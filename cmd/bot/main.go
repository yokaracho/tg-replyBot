package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"tg-replyBot/internal/ai"
	"tg-replyBot/internal/bot"
	"tg-replyBot/internal/config"
	"tg-replyBot/internal/services"
	"tg-replyBot/internal/storage/memory"
	"tg-replyBot/pkg/logger"
)

func main() {
	printOutboundIPInfo()

	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
	logger := logger.New(cfg.Logger)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
	storage := memory.New()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ Ollama)
	aiProvider := ai.NewOllama(cfg.Ollama, logger)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
	contextManager := services.NewContextManager(storage, logger)
	styleManager := services.NewStyleManager()
	replyGenerator := services.NewReplyGenerator(aiProvider, styleManager, logger)

	// –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
	telegramBot, err := bot.New(cfg.Telegram, contextManager, replyGenerator, logger)
	if err != nil {
		logger.Fatal("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞", "error", err)
	}

	// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	ctx, cancel := context.WithCancel(context.Background())
	go func() {
		if err := telegramBot.Start(ctx); err != nil {
			logger.Error("–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞", "error", err)
		}
	}()

	logger.Info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

	// Graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	logger.Info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
	cancel()
	telegramBot.Stop()
	logger.Info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

type IPInfo struct {
	IP      string `json:"ip"`
	City    string `json:"city"`
	Region  string `json:"region"`
	Country string `json:"country"`
	Org     string `json:"org"`
}

func printOutboundIPInfo() {
	resp, err := http.Get("https://ipinfo.io/json")
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ipinfo.io:", err)
		return
	}
	defer resp.Body.Close()

	var info IPInfo
	if err := json.NewDecoder(resp.Body).Decode(&info); err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON:", err)
		return
	}

	fmt.Println("üì° IP-–∞–¥—Ä–µ—Å –∏ —Å—Ç—Ä–∞–Ω–∞, –≤–∏–¥–∏–º—ã–µ —Å–Ω–∞—Ä—É–∂–∏:")
	fmt.Printf("IP: %s\n", info.IP)
	fmt.Printf("–°—Ç—Ä–∞–Ω–∞: %s\n", info.Country)
	fmt.Printf("–†–µ–≥–∏–æ–Ω: %s\n", info.Region)
	fmt.Printf("–ì–æ—Ä–æ–¥: %s\n", info.City)
	fmt.Printf("–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: %s\n", info.Org)
}
